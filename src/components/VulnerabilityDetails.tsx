
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { 
  AlertTriangle, 
  ExternalLink, 
  Copy, 
  Shield, 
  Key,
  Clock,
  Database
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface VulnerabilityDetailsProps {
  vulnerability: {
    type: string;
    severity: string;
    txid: string;
    blockHeight: number;
    recoveredKey?: string;
    confidence: number;
    details: {
      rValue: string;
      sValue: string;
      publicKey: string;
      relatedTxids: string[];
    };
  };
  onViewExplorer?: (txid: string) => void;
}

const VulnerabilityDetails: React.FC<VulnerabilityDetailsProps> = ({ 
  vulnerability, 
  onViewExplorer 
}) => {
  const { toast } = useToast();

  const copyToClipboard = async (text: string, label: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied to clipboard",
        description: `${label} has been copied to your clipboard.`,
      });
    } catch (error) {
      console.error('Failed to copy:', error);
      toast({
        title: "Copy failed",
        description: "Failed to copy to clipboard. Please try again.",
        variant: "destructive",
      });
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-600';
      case 'high': return 'bg-orange-600';
      case 'medium': return 'bg-yellow-600';
      case 'low': return 'bg-blue-600';
      default: return 'bg-gray-600';
    }
  };

  const handleViewExplorer = (txid: string) => {
    console.log('Opening explorer for transaction:', txid);
    if (onViewExplorer) {
      onViewExplorer(txid);
    } else {
      const explorerUrl = `https://blockstream.info/tx/${txid}`;
      window.open(explorerUrl, '_blank');
    }
  };

  const handleExportReport = () => {
    console.log('Exporting vulnerability report...');
    const report = {
      timestamp: new Date().toISOString(),
      vulnerability: vulnerability,
      reportType: 'ECDSA Nonce Reuse Vulnerability'
    };
    
    const reportJson = JSON.stringify(report, null, 2);
    const blob = new Blob([reportJson], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-report-${vulnerability.txid.substring(0, 8)}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Report exported",
      description: "Vulnerability report has been downloaded.",
    });
  };

  return (
    <Card className="bg-slate-800/50 border-slate-700">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center text-white">
            <AlertTriangle className="w-5 h-5 mr-2 text-red-400" />
            ECDSA Vulnerability Detected
          </CardTitle>
          <Badge className={`${getSeverityColor(vulnerability.severity)} text-white`}>
            {vulnerability.severity.toUpperCase()}
          </Badge>
        </div>
        <CardDescription className="text-gray-400">
          Real vulnerability found in blockchain transaction data
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <Alert className="border-red-500/30 bg-red-500/10">
          <Shield className="h-4 w-4 text-red-400" />
          <AlertDescription className="text-red-200">
            <strong>Critical Security Issue:</strong> This vulnerability allows complete private key recovery.
            Confidence level: {(vulnerability.confidence * 100).toFixed(1)}%
          </AlertDescription>
        </Alert>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-white flex items-center">
              <Database className="w-4 h-4 mr-2" />
              Transaction Details
            </h3>
            
            <div className="space-y-3">
              <div>
                <div className="text-sm text-gray-400">Transaction ID</div>
                <div className="flex items-center justify-between bg-slate-900/50 p-2 rounded">
                  <span className="font-mono text-sm text-white truncate mr-2">
                    {vulnerability.txid}
                  </span>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => copyToClipboard(vulnerability.txid, 'Transaction ID')}
                    className="h-6 w-6 p-0 hover:bg-slate-700"
                  >
                    <Copy className="w-3 h-3" />
                  </Button>
                </div>
              </div>

              <div>
                <div className="text-sm text-gray-400">Block Height</div>
                <div className="text-white font-mono">{vulnerability.blockHeight.toLocaleString()}</div>
              </div>

              <div>
                <div className="text-sm text-gray-400">Vulnerability Type</div>
                <div className="text-white capitalize">{vulnerability.type.replace('_', ' ')}</div>
              </div>
            </div>
          </div>

          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-white flex items-center">
              <Key className="w-4 h-4 mr-2" />
              Cryptographic Data
            </h3>
            
            <div className="space-y-3">
              <div>
                <div className="text-sm text-gray-400">R Value (Reused Nonce)</div>
                <div className="flex items-center justify-between bg-slate-900/50 p-2 rounded">
                  <span className="font-mono text-xs text-green-400 truncate mr-2">
                    {vulnerability.details.rValue}
                  </span>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => copyToClipboard(vulnerability.details.rValue, 'R Value')}
                    className="h-6 w-6 p-0 hover:bg-slate-700"
                  >
                    <Copy className="w-3 h-3" />
                  </Button>
                </div>
              </div>

              <div>
                <div className="text-sm text-gray-400">S Value</div>
                <div className="font-mono text-xs text-white bg-slate-900/50 p-2 rounded truncate">
                  {vulnerability.details.sValue}
                </div>
              </div>

              <div>
                <div className="text-sm text-gray-400">Public Key</div>
                <div className="font-mono text-xs text-white bg-slate-900/50 p-2 rounded truncate">
                  {vulnerability.details.publicKey}
                </div>
              </div>
            </div>
          </div>
        </div>

        {vulnerability.recoveredKey && (
          <>
            <Separator className="bg-slate-600" />
            <Alert className="border-green-500/30 bg-green-500/10">
              <Key className="h-4 w-4 text-green-400" />
              <AlertDescription className="text-green-200">
                <div className="space-y-2">
                  <div className="font-semibold">Private Key Successfully Recovered</div>
                  <div className="flex items-center justify-between bg-slate-900/50 p-3 rounded">
                    <span className="font-mono text-sm text-green-400 truncate mr-2">
                      {vulnerability.recoveredKey}
                    </span>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => copyToClipboard(vulnerability.recoveredKey!, 'Private Key')}
                      className="h-6 w-6 p-0 hover:bg-slate-700"
                    >
                      <Copy className="w-3 h-3" />
                    </Button>
                  </div>
                </div>
              </AlertDescription>
            </Alert>
          </>
        )}

        {vulnerability.details.relatedTxids.length > 1 && (
          <>
            <Separator className="bg-slate-600" />
            <div>
              <h4 className="text-md font-semibold text-white mb-3">Related Transactions</h4>
              <div className="space-y-2">
                {vulnerability.details.relatedTxids.slice(0, 3).map((txid, index) => (
                  <div key={index} className="flex items-center justify-between bg-slate-900/50 p-2 rounded">
                    <span className="font-mono text-xs text-gray-300 truncate mr-2">
                      {txid}
                    </span>
                    <Button 
                      size="sm" 
                      variant="outline" 
                      className="h-6 text-xs border-slate-600 hover:bg-slate-700"
                      onClick={() => handleViewExplorer(txid)}
                    >
                      <ExternalLink className="w-3 h-3" />
                    </Button>
                  </div>
                ))}
                {vulnerability.details.relatedTxids.length > 3 && (
                  <div className="text-sm text-gray-400 text-center">
                    +{vulnerability.details.relatedTxids.length - 3} more transactions
                  </div>
                )}
              </div>
            </div>
          </>
        )}

        <div className="flex gap-3">
          <Button 
            className="flex-1 bg-blue-600 hover:bg-blue-700"
            onClick={() => handleViewExplorer(vulnerability.txid)}
          >
            <ExternalLink className="w-4 h-4 mr-2" />
            View on Explorer
          </Button>
          <Button 
            variant="outline" 
            className="flex-1 border-slate-600 text-white hover:bg-slate-700"
            onClick={handleExportReport}
          >
            <Clock className="w-4 h-4 mr-2" />
            Export Report
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityDetails;
