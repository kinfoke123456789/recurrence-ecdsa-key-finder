
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { 
  Search, 
  Filter, 
  Download, 
  Calendar,
  TrendingUp,
  AlertTriangle,
  Eye,
  ExternalLink
} from 'lucide-react';

interface VulnerabilityRecord {
  id: string;
  timestamp: number;
  type: string;
  severity: string;
  txid: string;
  blockHeight: number;
  recoveredKey?: string;
  confidence: number;
  exploitValue: number;
}

interface VulnerabilityHistoryProps {
  onViewDetails?: (vulnerability: VulnerabilityRecord) => void;
}

const VulnerabilityHistory: React.FC<VulnerabilityHistoryProps> = ({ onViewDetails }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterSeverity, setFilterSeverity] = useState('all');
  const [vulnerabilities] = useState<VulnerabilityRecord[]>([
    {
      id: '1',
      timestamp: Date.now() - 3600000,
      type: 'nonce_reuse',
      severity: 'critical',
      txid: 'a1b2c3d4e5f6789abc123def456789abc123def456789abc123def456789abc123',
      blockHeight: 870944,
      recoveredKey: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',
      confidence: 0.98,
      exploitValue: 2.5
    },
    {
      id: '2',
      timestamp: Date.now() - 7200000,
      type: 'weak_randomness',
      severity: 'high',
      txid: 'b2c3d4e5f6789abc123def456789abc123def456789abc123def456789abc1234',
      blockHeight: 870943,
      confidence: 0.87,
      exploitValue: 0.8
    },
    {
      id: '3',
      timestamp: Date.now() - 10800000,
      type: 'biased_k',
      severity: 'medium',
      txid: 'c3d4e5f6789abc123def456789abc123def456789abc123def456789abc12345',
      blockHeight: 870942,
      confidence: 0.72,
      exploitValue: 0.3
    }
  ]);

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.txid.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.type.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSeverity = filterSeverity === 'all' || vuln.severity === filterSeverity;
    return matchesSearch && matchesSeverity;
  });

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600';
      case 'high': return 'bg-orange-600';
      case 'medium': return 'bg-yellow-600';
      case 'low': return 'bg-blue-600';
      default: return 'bg-gray-600';
    }
  };

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleString();
  };

  const handleExportData = () => {
    const csvData = filteredVulnerabilities.map(vuln => ({
      timestamp: formatDate(vuln.timestamp),
      type: vuln.type,
      severity: vuln.severity,
      txid: vuln.txid,
      blockHeight: vuln.blockHeight,
      confidence: vuln.confidence,
      exploitValue: vuln.exploitValue
    }));

    const csv = [
      Object.keys(csvData[0]).join(','),
      ...csvData.map(row => Object.values(row).join(','))
    ].join('\n');

    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-history-${Date.now()}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleViewDetails = (vulnerability: VulnerabilityRecord) => {
    console.log('Viewing vulnerability details:', vulnerability);
    if (onViewDetails) {
      onViewDetails(vulnerability);
    }
  };

  const totalExploitValue = vulnerabilities.reduce((sum, vuln) => sum + vuln.exploitValue, 0);

  return (
    <Card className="bg-slate-800/50 border-slate-700">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center text-white">
            <Calendar className="w-5 h-5 mr-2 text-purple-400" />
            Vulnerability History
          </CardTitle>
          <Button
            onClick={handleExportData}
            variant="outline"
            className="border-slate-600 text-white hover:bg-slate-700"
          >
            <Download className="w-4 h-4 mr-2" />
            Export CSV
          </Button>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <Card className="bg-slate-900/50 border-slate-600">
            <CardContent className="p-4">
              <div className="flex items-center">
                <AlertTriangle className="w-8 h-8 text-red-400 mr-3" />
                <div>
                  <div className="text-2xl font-bold text-white">{vulnerabilities.length}</div>
                  <div className="text-sm text-gray-400">Total Found</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-900/50 border-slate-600">
            <CardContent className="p-4">
              <div className="flex items-center">
                <TrendingUp className="w-8 h-8 text-green-400 mr-3" />
                <div>
                  <div className="text-2xl font-bold text-white">{totalExploitValue.toFixed(2)} BTC</div>
                  <div className="text-sm text-gray-400">Total Value</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-slate-900/50 border-slate-600">
            <CardContent className="p-4">
              <div className="flex items-center">
                <Calendar className="w-8 h-8 text-blue-400 mr-3" />
                <div>
                  <div className="text-2xl font-bold text-white">24h</div>
                  <div className="text-sm text-gray-400">Last Detection</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="flex gap-4 mb-4">
          <div className="flex-1">
            <Input
              placeholder="Search by transaction ID or type..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="bg-slate-700 border-slate-600 text-white"
            />
          </div>
          <select
            value={filterSeverity}
            onChange={(e) => setFilterSeverity(e.target.value)}
            className="px-4 py-2 bg-slate-700 border-slate-600 rounded text-white"
          >
            <option value="all">All Severities</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
          </select>
        </div>

        <div className="space-y-3">
          {filteredVulnerabilities.map((vuln) => (
            <div key={vuln.id} className="bg-slate-900/50 p-4 rounded border border-slate-600">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-3">
                  <Badge className={`${getSeverityColor(vuln.severity)} text-white`}>
                    {vuln.severity.toUpperCase()}
                  </Badge>
                  <span className="text-white font-semibold">{vuln.type.replace('_', ' ')}</span>
                  <span className="text-gray-400 text-sm">Block #{vuln.blockHeight}</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-green-400 font-semibold">{vuln.exploitValue} BTC</span>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => handleViewDetails(vuln)}
                    className="h-8 border-slate-600 hover:bg-slate-700"
                  >
                    <Eye className="w-3 h-3 mr-1" />
                    View
                  </Button>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div>
                  <div className="text-gray-400">Transaction ID</div>
                  <div className="font-mono text-white truncate">{vuln.txid}</div>
                </div>
                <div>
                  <div className="text-gray-400">Detection Time</div>
                  <div className="text-white">{formatDate(vuln.timestamp)}</div>
                </div>
              </div>

              <div className="mt-3 flex items-center justify-between">
                <div className="text-sm">
                  <span className="text-gray-400">Confidence: </span>
                  <span className="text-white">{(vuln.confidence * 100).toFixed(1)}%</span>
                </div>
                {vuln.recoveredKey && (
                  <Badge variant="secondary" className="bg-green-600/20 text-green-300 text-xs">
                    Key Recovered
                  </Badge>
                )}
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityHistory;
